function copyDataInBatches() {
  // Source Google Sheet (replace with the actual source sheet ID)
  var sourceSheetId = 'SOURCE_SHEET_ID'; // Replace with your source sheet ID
  var sourceSpreadsheet = SpreadsheetApp.openById(sourceSheetId);
  var sourceSheet = sourceSpreadsheet.getSheetByName('Detail Data');
  
  // Create a new Temporary Google Sheet (standalone)
  var temporarySpreadsheet = SpreadsheetApp.create('Temporary');
  var tempSheet = temporarySpreadsheet.getActiveSheet();
  
  // Get the header row (first row)
  var header = sourceSheet.getRange(1, 1, 1, sourceSheet.getLastColumn()).getValues()[0];
  
  // Define required column names
  var requiredColumns = [
    "Host Name", "VPR", "Plugin ID", "Plugin Name", "IP", "Description", "Solution",
    "First Discovered", "Last Observed", "Days Since First Discovered", 
    "Days Since Last Observed", "Bus App Name", "VPR Remediation Due Date", 
    "VPR Compliance", "Risk Type"
  ];

  // Find the indexes of the required columns in the header
  var columnIndexes = requiredColumns.map(function(colName) {
    var index = header.indexOf(colName);
    if (index === -1) {
      throw new Error('Column not found: ' + colName);
    }
    return index;
  });

  // Set the headers in the Temporary sheet
  tempSheet.getRange(1, 1, 1, requiredColumns.length).setValues([requiredColumns]);

  // Get the total number of rows (batch size can be adjusted)
  var totalRows = sourceSheet.getLastRow();
  var batchSize = 5000; // Number of rows per batch
  var startRow = 2; // Start from the second row (skipping the header row)
  var endRow = Math.min(startRow + batchSize - 1, totalRows);
  
  // Process data in batches
  function processBatch() {
    var dataRange = sourceSheet.getRange(startRow, 1, endRow - startRow + 1, sourceSheet.getLastColumn());
    var data = dataRange.getValues();
    
    // Extract the required columns using the column indexes
    var extractedData = data.map(function(row) {
      return columnIndexes.map(function(index) {
        return row[index];
      });
    });

    // Copy the extracted data to the Temporary Sheet
    tempSheet.getRange(tempSheet.getLastRow() + 1, 1, extractedData.length, extractedData[0].length).setValues(extractedData);

    // Update start and end rows for the next batch
    startRow = endRow + 1;
    endRow = Math.min(startRow + batchSize - 1, totalRows);

    // If there's more data to process, rerun the function after 40 seconds
    if (startRow <= totalRows) {
      Utilities.sleep(40000);  // Wait for 40 seconds
      processBatch(); // Recurse to the next batch
    } else {
      // Once all data is processed, apply filter on the 'Bus App Name' column
      applyFilterToBusAppName(tempSheet);
      
      // Once all data is processed, log the link to the new Temporary Sheet
      var sheetUrl = temporarySpreadsheet.getUrl();
      Logger.log('Temporary Sheet Link: ' + sheetUrl);
      
      // Optionally, send the link via email
      // MailApp.sendEmail("your-email@example.com", "Data Copy Complete", "The data copy is complete. Here is the link to the Temporary Sheet: " + sheetUrl);
    }
  }

  // Start processing the first batch
  processBatch();
}

function applyFilterToBusAppName(tempSheet) {
  // Get the 'Bus App Name' column index (from header row)
  var header = tempSheet.getRange(1, 1, 1, tempSheet.getLastColumn()).getValues()[0];
  var busAppNameIndex = header.indexOf("Bus App Name") + 1; // Column index for 'Bus App Name' (1-based)

  // List of application names (replace with your actual app names)
  var appNames = ["App1", "App2", "App3", "App4", "App5", "App6", "App7", "App8", "App9", "App10", 
                  "App11", "App12", "App13", "App14", "App15", "App16", "App17", "App18"];

  // Loop through all rows and hide rows that do not match the app names
  var lastRow = tempSheet.getLastRow();
  for (var i = 2; i <= lastRow; i++) { // Start from row 2 (skipping header)
    var busAppName = tempSheet.getRange(i, busAppNameIndex).getValue();
    
    // If the Bus App Name does not match any of the selected applications, hide the row
    if (!appNames.includes(busAppName)) {
      tempSheet.hideRows(i);
    }
  }
}
