// This function will start batch processing
function startGenerateWeeklyClosedCount() {
  var fixedSheetId = 'FIXED_SHEET_ID'; // Replace with the actual fixed sheet ID
  var fixedSpreadsheet = SpreadsheetApp.openById(fixedSheetId);
  
  // Create or get the "Weekly Closed Count" sheet
  var weeklyClosedSheet = fixedSpreadsheet.getSheetByName('Weekly Closed Count');
  if (!weeklyClosedSheet) {
    weeklyClosedSheet = fixedSpreadsheet.insertSheet('Weekly Closed Count');
    Logger.log("Weekly Closed Count sheet created.");
  } else {
    weeklyClosedSheet.clear(); // Clear existing data
  }

  // Set the header for the "Weekly Closed Count" sheet
  weeklyClosedSheet.getRange(1, 1).setValue("Date");
  weeklyClosedSheet.getRange(1, 2).setValue("Last Week Closed Count");

  // Start processing the first batch from row 2 (after header)
  processBatch(2);
}

// This function processes data in batches
function processBatch(startRow) {
  var fixedSheetId = 'FIXED_SHEET_ID'; // Replace with the actual fixed sheet ID
  var fixedSpreadsheet = SpreadsheetApp.openById(fixedSheetId);

  var weeklyClosedSheet = fixedSpreadsheet.getSheetByName('Weekly Closed Count');
  var detailDataSheet = fixedSpreadsheet.getSheetByName('Detail Data');
  var lastWeekDataSheet = fixedSpreadsheet.getSheetByName('Last Week Data');

  var detailData = detailDataSheet.getDataRange().getValues();
  var lastWeekData = lastWeekDataSheet.getDataRange().getValues();

  var header = detailData[0];
  var uniqueIdentifierIndex = header.indexOf("Unique Identifier w Repository & Port");

  var detailDataIdentifiers = new Set();
  for (var i = 1; i < detailData.length; i++) {
    var uniqueIdentifier = detailData[i][uniqueIdentifierIndex];
    detailDataIdentifiers.add(uniqueIdentifier);
  }

  var closedCount = 0;
  var batchSize = 1000;  // Process 1000 rows at a time
  var endRow = Math.min(startRow + batchSize - 1, lastWeekData.length);
  
  // Process data for this batch
  for (var j = startRow; j <= endRow; j++) {
    var uniqueIdentifier = lastWeekData[j][uniqueIdentifierIndex];
    if (!detailDataIdentifiers.has(uniqueIdentifier)) {
      closedCount++; // Increment the closed count
    }
  }

  // Write the closed count to the Weekly Closed Count sheet
  var currentDate = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd");
  var dateExists = false;
  var rows = weeklyClosedSheet.getDataRange().getValues();
  for (var k = 1; k < rows.length; k++) {
    if (rows[k][0] === currentDate) {
      weeklyClosedSheet.getRange(k + 1, 2).setValue(closedCount); // Overwrite the closed count for the current date
      dateExists = true;
      break;
    }
  }

  // If date does not exist, add a new row with the current date and closed count
  if (!dateExists) {
    weeklyClosedSheet.appendRow([currentDate, closedCount]);
  }

  // Log whether the count was added/updated
  if (dateExists) {
    Logger.log('Updated the closed count for ' + currentDate + ': ' + closedCount);
  } else {
    Logger.log('Added new entry for ' + currentDate + ' with closed count: ' + closedCount);
  }

  // If there is more data to process, trigger the next batch
  if (endRow < lastWeekData.length) {
    var nextStartRow = endRow + 1;
    Logger.log("Processing next batch starting at row " + nextStartRow);
    
    // Create a time-based trigger to call processBatch with the next batch of rows
    ScriptApp.newTrigger('processBatch')
      .timeBased()
      .after(1000)  // Trigger after 1 second to avoid timeout
      .create();
  } else {
    Logger.log('Weekly Closed Count completed.');
  }
}
