function copyDataInBatches() {
  // Step 1: Fetch data in batches from the source Google Sheet and create a temporary Google Sheet
  var sourceSheetId = 'SOURCE_SHEET_ID'; // Replace with your source sheet ID
  var sourceSpreadsheet = SpreadsheetApp.openById(sourceSheetId);
  var sourceSheet = sourceSpreadsheet.getSheetByName('Detail Data');

  // Create a new Temporary Google Sheet (standalone)
  var temporarySpreadsheet = SpreadsheetApp.create('Temporary');
  var tempSheet = temporarySpreadsheet.getActiveSheet();

  // Get the header row (first row)
  var header = sourceSheet.getRange(1, 1, 1, sourceSheet.getLastColumn()).getValues()[0];
  var requiredColumns = header;  // Assuming the required columns are the same as in source
  var columnIndexes = requiredColumns.map(function(colName) {
    var index = header.indexOf(colName);
    if (index === -1) {
      throw new Error('Column not found: ' + colName);
    }
    return index;
  });

  // Set the headers in the Temporary sheet
  tempSheet.getRange(1, 1, 1, requiredColumns.length).setValues([requiredColumns]);

  // Get the total number of rows (batch size can be adjusted)
  var totalRows = sourceSheet.getLastRow();
  var batchSize = 5000; // Number of rows per batch
  var startRow = 2; // Start from the second row (skipping the header row)
  var endRow = Math.min(startRow + batchSize - 1, totalRows);

  // Process data in batches
  function processBatch() {
    var dataRange = sourceSheet.getRange(startRow, 1, endRow - startRow + 1, sourceSheet.getLastColumn());
    var data = dataRange.getValues();

    // Filter out rows based on your condition (optional, but useful if needed)
    var filteredData = data.map(function(row) {
      // Extract only the required columns using column indexes
      return columnIndexes.map(function(index) {
        return row[index];
      });
    });

    // If there are any filtered rows, append them to the Temporary Sheet
    if (filteredData.length > 0) {
      tempSheet.getRange(tempSheet.getLastRow() + 1, 1, filteredData.length, filteredData[0].length).setValues(filteredData);
    }

    // Update start and end rows for the next batch
    startRow = endRow + 1;
    endRow = Math.min(startRow + batchSize - 1, totalRows);

    // If there's more data to process, rerun the function after 40 seconds
    if (startRow <= totalRows) {
      Utilities.sleep(40000);  // Wait for 40 seconds
      processBatch(); // Recurse to the next batch
    } else {
      // Once all data is processed, log the link to the new Temporary Sheet
      var sheetUrl = temporarySpreadsheet.getUrl();
      Logger.log('Temporary Sheet Link: ' + sheetUrl);

      // Step 2: Move data from Detail Data to Last Week Data in the fixed sheet
      handlePlatopsInternalFindings(temporarySpreadsheet); // Pass the temporary spreadsheet
    }
  }

  // Start processing the first batch
  processBatch();
}

function handlePlatopsInternalFindings(temporarySpreadsheet) {
  var fixedSheetId = 'FIXED_SHEET_ID'; // Replace with the actual fixed sheet ID
  var fixedSpreadsheet = SpreadsheetApp.openById(fixedSheetId);
  var sheet1 = fixedSpreadsheet.getSheetByName('Detail Data'); // The sheet where data is pasted

  // Step 3: Check if Detail Data has data, if yes, move it to Last Week Data
  Logger.log('Moving data from Detail Data to Last Week Data...');
  if (sheet1.getLastRow() > 0) {
    var existingData = sheet1.getDataRange().getValues();
    fixedSpreadsheet.getSheetByName('Last Week Data').getRange(1, 1, existingData.length, existingData[0].length).setValues(existingData);
    Logger.log('Data moved to Last Week Data.');
  } else {
    Logger.log('No data to move from Detail Data.');
  }

  // Clear the 'Detail Data' sheet before copying new data
  sheet1.clear();

  // Step 4: Paste data from the Temporary Sheet to Detail Data
  var newTempData = temporarySpreadsheet.getSheets()[0].getDataRange().getValues(); // Get current data from Temporary Sheet
  sheet1.getRange(1, 1, newTempData.length, newTempData[0].length).setValues(newTempData); // Paste the current data into Detail Data
  Logger.log('New data copied to Detail Data.');

  // Step 5: Fill the Counts Sheet with VPR counts
  Logger.log('Updating counts...');
  generateVPRCounts(fixedSpreadsheet); // Update the counts in the 'Counts' sheet

  // Step 6: Create a new report (Internal Findings_<current_date>) and copy data from fixed sheet
  Logger.log('Creating Internal Findings report...');
  var internalFindingsSheet = SpreadsheetApp.create("Internal Findings_" + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd")); // Create a new sheet
  var internalFindingsSpreadsheet = SpreadsheetApp.openById(internalFindingsSheet.getId());

  // Copy all sheets (Detail Data, Last Week Data, Counts) from the fixed spreadsheet to the new report
  copySheetToNewSpreadsheet(fixedSpreadsheet, internalFindingsSpreadsheet, 'Detail Data');
  copySheetToNewSpreadsheet(fixedSpreadsheet, internalFindingsSpreadsheet, 'Last Week Data');
  copySheetToNewSpreadsheet(fixedSpreadsheet, internalFindingsSpreadsheet, 'Counts');

  // Move the newly created report to the specified folder
  var folderId = 'YOUR_FOLDER_ID';  // Replace with the folder ID where the report should be created
  var folder = DriveApp.getFolderById(folderId); // Get the folder by ID
  folder.addFile(DriveApp.getFileById(internalFindingsSheet.getId()));
  Logger.log('Internal Findings report created and moved to folder: ' + folder.getName());

  // Send the email with the report attached
  sendEmailWithReport(internalFindingsSheet);
}

// Helper function to copy a sheet from the fixed spreadsheet to the new report
function copySheetToNewSpreadsheet(sourceSpreadsheet, destinationSpreadsheet, sheetName) {
  var sourceSheet = sourceSpreadsheet.getSheetByName(sheetName);
  if (sourceSheet) {
    var copiedSheet = sourceSheet.copyTo(destinationSpreadsheet);
    copiedSheet.setName(sheetName);
    Logger.log('Sheet "' + sheetName + '" copied to the new report.');
  } else {
    Logger.log('Sheet "' + sheetName + '" not found in the source spreadsheet.');
  }
}

// VPR Counts generation logic
function generateVPRCounts(fixedSpreadsheet) {
  var dataSheet = fixedSpreadsheet.getSheetByName('Detail Data'); // The sheet where your data is
  var countsSheet = fixedSpreadsheet.getSheetByName('Counts'); // The sheet where the counts will be stored

  // Retrieve the data range from the "Detail Data" sheet
  var data = dataSheet.getDataRange().getValues();

  // Prepare the "Counts" sheet (if it doesn't already exist, create it)
  if (!countsSheet) {
    countsSheet = fixedSpreadsheet.insertSheet('Counts');
  } else {
    countsSheet.clear(); // Clear the sheet if it exists
  }

  // Set headers for the "Counts" sheet
  countsSheet.getRange(1, 1).setValue("Location");
  countsSheet.getRange(1, 2).setValue("App Name");
  countsSheet.getRange(1, 3).setValue("CRTICAL");
  countsSheet.getRange(1, 4).setValue("HIGH");
  countsSheet.getRange(1, 5).setValue("MEDIUM");
  countsSheet.getRange(1, 6).setValue("LOW");
  countsSheet.getRange(1, 7).setValue("INFO");

  // Initialize a counter object to store the counts
  var counts = {};

  // Loop through the data and count occurrences of each VPR value per location/app
  for (var i = 1; i < data.length; i++) {
    var location = data[i][data[0].indexOf('Location')];
    var appName = data[i][data[0].indexOf('Bus App Name')];
    var vpr = data[i][data[0].indexOf('VPR')];

    if (!counts[location]) {
      counts[location] = {};
    }

    if (!counts[location][appName]) {
      counts[location][appName] = {
        "CRTICAL": 0,
        "HIGH": 0,
        "MEDIUM": 0,
        "LOW": 0,
        "INFO": 0
      };
    }

    // Increment the count for the VPR value
    if (counts[location][appName][vpr] !== undefined) {
      counts[location][appName][vpr]++;
    }
  }

  // Write the counts to the "Counts" sheet
  var row = 2;
  for (var loc in counts) {
    for (var app in counts[loc]) {
      var countRow = [loc, app, 
                      counts[loc][app]["CRTICAL"], 
                      counts[loc][app]["HIGH"], 
                      counts[loc][app]["MEDIUM"], 
                      counts[loc][app]["LOW"], 
                      counts[loc][app]["INFO"]];
      countsSheet.getRange(row, 1, 1, countRow.length).setValues([countRow]);
      row++;
    }
  }

  Logger.log('VPR counts generated and added to the "Counts" sheet.');
}

function sendEmailWithReport(internalFindingsSheet) {
  var subject = "Internal Findings Report for " + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd");
  var body = "Hi Team,\n\nPlease find attached the Internal Findings Report.\n\nRegards,\nTeam";

  // Get the file ID of the report
  var reportFile = DriveApp.getFileById(internalFindingsSheet.getId());

  // Send the email with the attached report
  MailApp.sendEmail({
    to: 'recipient@example.com', // Replace with the recipient's email address
    subject: subject,
    body: body,
    attachments: [reportFile.getAs(MimeType.GOOGLE_SHEETS)]  // Attach the report as a Google Sheet
  });

  Logger.log("Email sent successfully with the report attached.");
}

