function generateLastWeekClosedCount() {
  const sheetId = 'YOUR_SHEET_ID'; // Replace with your Google Sheet ID
  const ss = SpreadsheetApp.openById(sheetId); // Open the Google Sheet by ID
  const detailSheet = ss.getSheetByName('Detail Data');
  const lastWeekSheet = ss.getSheetByName('Last Week Data');
  
  // Get the data from both sheets
  const detailData = detailSheet.getDataRange().getValues();
  const lastWeekData = lastWeekSheet.getDataRange().getValues();

  // Create or clear the "Last Week Closed Count" sheet
  let closedCountSheet = ss.getSheetByName('Last Week Closed Count');
  if (!closedCountSheet) {
    closedCountSheet = ss.insertSheet('Last Week Closed Count');
  } else {
    closedCountSheet.clear(); // Clear existing data
  }

  // Add header row
  closedCountSheet.appendRow(['Date', 'Location', 'Patched', 'New', 'Unpatched']);

  const today = new Date().toLocaleDateString(); // Current date

  // Collect all unique locations from both sheets
  const locations = [...new Set([
    ...detailData.map(row => row[detailData[0].indexOf('Location')]),
    ...lastWeekData.map(row => row[lastWeekData[0].indexOf('Location')])
  ])];

  // Iterate through each location and count New, Patched, and Unpatched findings
  locations.forEach(location => {
    const newFindings = countNewFindings(detailData, lastWeekData, location);
    const patchedFindings = countPatchedFindings(detailData, lastWeekData, location);
    const unpatchedFindings = countUnpatchedFindings(detailData, lastWeekData, location);

    // Output results to the new sheet
    closedCountSheet.appendRow([today, location, patchedFindings, newFindings, unpatchedFindings]);
  });
}

// Count New findings: Present in Detail Data but not in Last Week Data
function countNewFindings(detailData, lastWeekData, location) {
  const detailIdentifiers = getIdentifiersByLocation(detailData, location);
  const lastWeekIdentifiers = getIdentifiersByLocation(lastWeekData, location);

  return detailIdentifiers.filter(identifier => !lastWeekIdentifiers.includes(identifier)).length;
}

// Count Patched findings: Present in Last Week Data but not in Detail Data
function countPatchedFindings(detailData, lastWeekData, location) {
  const detailIdentifiers = getIdentifiersByLocation(detailData, location);
  const lastWeekIdentifiers = getIdentifiersByLocation(lastWeekData, location);

  return lastWeekIdentifiers.filter(identifier => !detailIdentifiers.includes(identifier)).length;
}

// Count Unpatched findings: Identifiers present in both but have changes
function countUnpatchedFindings(detailData, lastWeekData, location) {
  const detailIdentifiers = getIdentifiersByLocation(detailData, location);
  const lastWeekIdentifiers = getIdentifiersByLocation(lastWeekData, location);

  return detailIdentifiers.filter(identifier => 
    lastWeekIdentifiers.includes(identifier) &&
    hasChanges(identifier, detailData, lastWeekData, location)
  ).length;
}

// Get identifiers by location
function getIdentifiersByLocation(data, location) {
  return data.filter(row => row[data[0].indexOf('Location')] === location)
             .map(row => row[data[0].indexOf('Unique Identifier w Repository & Port')]);
}

// Check if there are changes for an identifier between this week and last week
function hasChanges(identifier, detailData, lastWeekData, location) {
  const detailRow = detailData.find(row => row[detailData[0].indexOf('Unique Identifier w Repository & Port')] === identifier && row[detailData[0].indexOf('Location')] === location);
  const lastWeekRow = lastWeekData.find(row => row[lastWeekData[0].indexOf('Unique Identifier w Repository & Port')] === identifier && row[lastWeekData[0].indexOf('Location')] === location);

  // Compare any other columns you want to track for changes (example: "Status", "Description")
  return detailRow && lastWeekRow && detailRow.join() !== lastWeekRow.join();
}
